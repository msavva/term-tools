" VIMRC
"
" Read the various sections to see all the command mappings.
" Many (but not all) of the plugins have mini-documentation
" where they are configured.
"
" Must be first since this sets some options as a side effect
set nocompatible

" Pathogen : package manager {{{
filetype off
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
" }}}

" Global config {{{

set t_Co=256
set background=dark
syntax on
colorscheme tomorrow-night

" Misc
let is_bash=1          " we are using bash
set encoding=utf-8     " use UTF-8 (default latin1)
set autoread           " auto-reload modified files (with no local changes)
set undolevels=65536   " lots of undo (default 1000)
set history=1024       " lots of history (default 20)
set mouse=a            " enable mouse (set mouse= to disable mouse)
set foldmethod=syntax  " fold using syntax by default
set foldminlines=4     " require a medium size to fold
set foldnestmax=3      " max 3 fold levels for syntax/indent folding
set hidden             " allow un-saved buffers in background
set lazyredraw         " no redraws in macros
set confirm            " dialog when :q, :w, :x, :wq fails
set title              " change terminal title
set nostartofline      " don't move cursor when switching buffers/files
set ttyfast            " smoother changes

if has('unix') && system("uname") == "Linux\n"
	set clipboard=unnamedplus  " Share X windows clipboard.
else
	set clipboard=unnamed  " Share system clipboard.
endif

" Appearance
set number             " enable line numbers
set scrolloff=3        " keep 3 lines below and above cursor
set linebreak          " show wrap at word boundaries
set showbreak=\ ↪\     " prefix wrap with ↪

" Autocompletion
set wildmenu                 " completion with menu
set wildmode=list:longest    " list instead of fill in options
set wildignore=*~,*.o,*.d,*.obj,*.class,*.bak,*.swp,.svn,.git
set suffixes=~,.o,.d,.obj,.class,.bak,.swp
set completeopt=menu,preview " Completion with a menu

" Indentation -- width of 4 spaces
set autoindent     " automatic indentation
set smartindent    " enable C-style indenting by default (useful for C/C++)
set tabstop=4      " Number of spaces that a <Tab> in the file counts for (default 8)
set shiftwidth=4   " Number of spaces to use for each step of (auto)indent.
set textwidth=0    " no hard wrapping by default

" Better search
set incsearch      " incremental search
set ignorecase     " ignore case in search
set smartcase      " override ignorecase if uppercase is used in search string
set hlsearch       " enable search highlighting (change to nohlsearch to disable)
                   " clear highlight with :noh

" Show more things
set showmode       " show which mode we are in
set showcmd        " show state of keyboard input
set showmatch      " show brace match
set matchtime=2    " faster brace match
set report=0       " report all changes
set ruler          " show position in bottom right
" Backspace can move back beyond the start of the insertion (smart)
set backspace=2

" STFU
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" }}}

" Convenient commands {{{

" Use , instead of \ for leader key (must be defined first)
let mapleader=','

" Make Y more consistent with C and D
call yankstack#setup()
nmap Y y$

" Ctrl-Left/right -- switch tabs
noremap <c-left>  gT
noremap <c-right> gt

" left/right -- move tabs
"noremap <c-left>  :execute 'silent! tabmove ' . (tabpagenr()-2)<cr>
"noremap <c-right> :execute 'silent! tabmove ' . tabpagenr()<cr>

" Ctrl-Up/down -- switch windows
noremap <c-down> <c-w>w
noremap <c-up> <c-w>W

" up/down -- move windows
"noremap <c-down> <c-w>r
"noremap <c-up> <c-w>R

" Ctrl+alt+left/right -- move window into new tab left or right
map <c-s-left> <c-w>T<c-left>
map <c-s-right> <c-w>T<c-right>

" Navigating tabs
noremap <leader>tl gt         " move right a tab
noremap <leader>th gT         " move left a tab

let g:lasttab = 1
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <leader>tt <esc>:exe 'tabn '.g:lasttab<cr> " Move to previous tab

" Managing tabs
noremap <leader>tn :tabnew<cr>
noremap <leader>to :tabonly<cr>
noremap <leader>tc :tabclose<cr>
noremap <leader>tf :tabnew<cr>:CtrlP<cr>

" Navigating windows
noremap <leader>ww <c-w>w " move below/right in a cycle
noremap <leader>wt <c-w>t " move to top/left
noremap <leader>wb <c-w>b " move to bottom/right
noremap <leader>wp <c-w>p " move to previous window
noremap <leader>wl <c-w>l " move right a window
noremap <leader>wh <c-w>h " move left a window
noremap <leader>wj <c-w>j " move down a window
noremap <leader>wk <c-w>k " move up a window

" Managing windows
noremap <leader>wn <c-w>n " create a new window with empty file
noremap <leader>ws <c-w>s " split current window
noremap <leader>wv <c-w>v " split current window vertically
noremap <leader>wq <c-w>q " quit current window
noremap <leader>wc <c-w>c " close current window
noremap <leader>wo <c-w>o " make current window only one on screen
noremap <leader>wf <c-w>v:CtrlP<cr>

" Navigate buffers
noremap <leader>bp :bp<cr>
noremap <leader>bn :bn<cr>
noremap <leader>bd :bd<cr>

" Edit file in current window
noremap <leader>ew :e<space>
noremap <leader>we :e<space>
" Edit file in split (horizontal)
noremap <leader>es :sp<space>
noremap <leader>se :sp<space>
" Edit file in split (vertical)
noremap <leader>ev :vsp<space>
noremap <leader>ve :vsp<space>
" Edit file new tab
noremap <leader>et :tabe<space>
noremap <leader>te :tabe<space>

" Move easily between ^ (line beginning) and $ (line end)
noremap <c-h> ^
noremap <c-l> $

" Move by displayed lines, not physical lines
noremap j gj
noremap k gk

" Indent with tab, unindent with shift-tab
nnoremap <tab> >>
vnoremap <tab> >
nnoremap <s-tab> <<
vnoremap <s-tab> <

" Also indent with space
nnoremap <space> >>
vnoremap <space> >

" Reflow paragraph with Q in normal and visual mode
nnoremap Q gwap
vnoremap Q gw

" <F2>: enter paste mode (while in insert mode) to paste from outside vim safely
noremap <F2> :set invpaste paste?<cr>
set pastetoggle=<F2>

"" Switch CWD to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" <leader>sp : toggle check SPelling
noremap <leader>sp <esc>:setlocal spell!<cr>

" <leader>sc : search clear highlight
noremap <leader>sc <esc>:noh<cr>

" ctrl+s : save (you have to enable passing ctrl+s from the terminal)
nmap <c-s> <esc>:w<cr>

" :w!! : Save with sudo
cmap w!! w !sudo tee % >/dev/null

" ctrl+a : select all
nnoremap <c-a> 1GVG

" backspace in normal mode
nmap <bs> X

" <leader>mk : run make
noremap <leader>mk :make<cr>

" Map :W --> :w etc (caps lock errors)
command! W :w
command! Wq :wq
command! WQ :wq
command! E :e

" <leader>sf -- style-format code
"    C++    -- ANSI style (A1), with tabs (assumes c/c++)
"    Python -- PEP8 style (should suppress all style warnings)
autocmd FileType c,cpp,h,hpp nnoremap <leader>sf <esc>:%!astyle -A1 -t<cr>
autocmd FileType python nnoremap <leader>sf <esc>:PyLintAuto<cr>

" }}}

" Global fixes {{{

" Faster timeout for some actions
set timeout timeoutlen=1000 ttimeoutlen=100

" Re-adjust windows on window resize
autocmd VimResized * wincmd =

" Insert mode -- don't undo folds when typing
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" Remove the toolbar if we're running under a GUI
if has("gui_running")
  set guioptions=-t
endif

" Fix backspaces
set backspace=indent,eol,start
if has('mac')
	fixdel
endif

" Jump to last known line when opening a file (change ' to ` to do column too)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g'\"" |
  \   if foldlevel('.') > 0 |
  \     exe "normal zO" |
  \   endif |
  \ endif

" Highlight trailing whitespace in the most annoying way possible.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Delete trailing white space
fun! DeleteTrailingWS()
	exe "normal mq"
	%s/\s\+$//ge
	exe "normal `q"
	":ShowMarksClearMark
endfun
" commented out: vim seems to hang on save with this
"autocmd BufWrite *.py :call DeleteTrailingWS()
"autocmd BufWrite *.sh :call DeleteTrailingWS()
"autocmd BufWrite *.coffee :call DeleteTrailingWS()
noremap <leader>dw <esc>:call DeleteTrailingWS()<cr>

" }}}

" FileType tabs, folding, wrapping {{{

" Python -- whitespace sensitive
autocmd FileType python setlocal tabstop=4 expandtab shiftwidth=4 softtabstop=4

" Latex -- 2-space tabs and 80-character hard wrapping
autocmd FileType tex setlocal expandtab shiftwidth=2 tabstop=2 textwidth=80

" Vimrc -- fold with markers
autocmd FileType vim setlocal foldmethod=marker

" Crontab -- save a backup
autocmd FileType crontab setlocal backupcopy=yes

" C/C++ -- smart indentation
autocmd FileTYpe c,cpp,h,hpp setlocal smartindent cindent

" }}}

" Plugin config {{{

" Powerline -- fancy status line
let g:Powerline_symbols = 'fancy'
set laststatus=2  " 2 means always show status

" YankStack -- paste older items on stack
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" Solarized -- change some color assignments to use less eye-bleeding red
" tex : eye-bleeding red --> dark gray (note that 2 or 3 also work pretty well)
autocmd FileType tex hi Special ctermfg=10
" cpp : eye-bleeding red --> bright blue
autocmd FileType c,cpp,h,hpp hi Special ctermfg=4

" Automatically insert C++ header gates for new h/hpp files
function! s:insert_gates()
  let gatename = '__' . substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename
  execute "normal! Go#endif /* " . gatename . " */"
  execute "normal! ggo"
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" ScmDiff -- <leader>d : inline diff with GIT version

" NERDCommenter -- use default mappings; some of them are:
"   -- <leader>ci : toggle comment
"   -- <leader>cc : comment;
"   -- <leader>cs : comment 'sexily';

" CtrlP -- searching files/buffers/tags/etc
"   -- when selecting a result:
"     -- enter: open in current window
"     -- ctrl+t: open in new ab
"     -- ctrl+v: open in vert split
"     -- ctrl+s: open in horiz split
noremap <leader>ff <esc>:CtrlP<cr>            " find file
noremap <leader>ft <esc>:CtrlPBufTagAll<cr>   " find tag
noremap <leader>fr <esc>:CtrlPMRUFiles<cr>    " find recently used file
noremap <leader>fb <esc>:CtrlPBuffer<cr>      " find buffer
noremap <leader>fq <esc>:CtrlPQuickfix<cr>    " find in quickfix
noremap <leader>fu <esc>:CtrlPUndo<cr>        " find in undo
noremap <leader>fl <esc>:CtrlPLine<cr>        " find in file (by line)
noremap <c-f> <esc>:CtrlPLine<cr>             " find in file (by line)

" CtrlP -- ignore files
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.exe$\|\.so$\|\.dll$\|\.o$\|\.d$\|\.swp$',
	\ }

" CtrlP -- only search current directory
let g:ctrlp_working_path_mode = ''

" CtrlP -- refresh file tree on write or focus change
augroup CtrlPExtension
  autocmd!
  autocmd FocusGained * ClearCtrlPCache
  autocmd BufWritePost * ClearCtrlPCache
augroup END

" TabMan -- fancy tab manager
let g:tabman_toggle = '<leader>tm'
let g:tabman_focus  = '<leader><leader>tm'

" GUndo -- <leader>u : show undo tree in right-hand window
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_right = 1

" FSwitch -- <leader>h or H
"   -- <leader>h -- open in vertical split
"   -- <leader>H -- open in current window (in place of current file)
"   -- (custom wrappers I wrote in plugins/sbell.vim)
noremap <leader>h <esc>:call FSSplitSmart()<cr>
noremap <leader>H <esc>:call FSNerd(":FSHere")<cr>

" EasyMotion -- map to <leader><leader> (then the usual movement keys: w, b, f, k, j ...)
let g:EasyMotion_leader_key = '<leader><leader>'

" EasyMotion -- jump repeatedly if inside NERDTree
" (custom function in plugins/sbell.vim)
nmap <leader>j <esc>:call EMNerd(0)<cr>
nmap <leader>k <esc>:call EMNerd(1)<cr>

" EasyMotion & Solarized fix
hi link EasyMotionTarget WarningMsg
hi link EasyMotionShade Normal

" TagBar -- ctags on right (mnemonic: Ctags)
"   -- ct : toggle
"   -- co : open
"   -- cf : find
"   -- cc : close
nnoremap <leader>ct :TagbarToggle<cr><c-w=
nnoremap <leader>co :TagbarOpen<cr><c-w>=
nnoremap <leader>cf :TagbarOpen fj<cr><c-w>=2H:call EasyMotion#JK(0, 0)<cr>
nnoremap <leader>cc :TagbarClose<cr><c-w>=

" NERDTree -- file browser on left (mnemonic: All files)
"   -- at : toggle
"   -- ao : open
"   -- af : find (custom function in plugins/sbell.vim)
"   -- ac : close
noremap <leader>at <esc>:NERDTreeToggle<cr><c-w>=
noremap <leader>ao <esc>:NERDTree<cr><c-w>=
noremap <leader>af <esc>:call NERDOpen()<cr>
noremap <leader>ac <esc>:NERDTreeClose<cr><c-w>=

" NERDTree -- open if no files are listed and set width to 30
autocmd vimenter * if !argc() | NERDTree | endif
let g:NERDTreeWinSize = 30

" CloseTag -- close html tags automagically
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" Syntastic -- inline syntax errors
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Fugutive -- git (note the other command: <leader>d for inline diff)
noremap <leader>gb <esc>:Gblame<cr>
noremap <leader>gs <esc>:Gstatus<cr>
noremap <leader>gd <esc>:Gdiff<cr>
noremap <leader>gl <esc>:Glog<cr>
noremap <leader>gc <esc>:Gcommit<cr>
noremap <leader>gp <esc>:Gpush<cr>

" ShowMarks -- toggle with <leader>mt
"  -- only include letters (I'm not sure what 0123456789.'`^<>[]{}()\" refers to but they
"     don't seem to match up with what ShowMarks shows in the side bar)
"  -- fix the default colors (default has foreground == background for me)
let g:showmarks_include='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
hi ShowMarksHLl ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLu ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLo ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold
hi ShowMarksHLm ctermfg=white ctermbg=darkgray cterm=bold guifg=blue guibg=lightblue gui=bold

" html indentation + vim javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" Python -- check on the fly instead of on write
let g:pymode_lint_write = 0
let g:pymode_lint_onfly = 0

" }}}

" Latex plugin config {{{

" Replace latex with their math symbol
" --> see bundle/sbell/syntax/tex.vim

" Disable the <++> that normally gets inserted with this latex plugin
let g:Imap_UsePlaceHolders = 0

" Treat \ and : like a word character
" Note: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!
autocmd FileType tex setlocal iskeyword+=\\
autocmd FileType tex setlocal iskeyword+=:

" BUGFIX: Vim7 has a problem detecting the filetype correctly when editing a new
" LaTex document
let g:tex_flavor='latex'

" BUGFIX: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse latex-suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*

" Latex leader: use , instead of `
let g:Tex_Leader=','

" Don't fold paragraphs or subsubsections
" (add ,subsubsection,paragraph to end of list to fold those too)
let g:Tex_FoldedSections='part,chapter,section,%%fakesection,subsection'

" Don't fold \item
" (add item, to the start of list to fold it too)
let g:Tex_FoldedMisc='preamble,<<<'

" Directory to scan for latex figure images
let g:Tex_ImageDir='.'

" Use PDF instead of DVI by default
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf='rubber --pdf $*'
if has('unix') && system("uname") == "Darwin\n"  "(mac)
    let g:Tex_ViewRule_pdf='open $*.pdf'
else
	let g:Tex_ViewRule_pdf='evince'
endif

" }}}
